normalizedRate=TRUE) {
if(is.null(ncores)) ncores <- parallel::detectCores()-1
if(is.na(ncores)) stop("Unable to detect number of cores, please set ncores= manually.")
tmp <- tempfile()
isAR1noise <- AR1=="noise"
isAR1process <- AR1=="process"
if(AR1==F) {
isAR1noise <- isAR1process <- F
}
isDetcycle <- !is.null(deterministicPeriods)
isStochcycle <- !is.null(stochasticPeriods)
isSigeps_split <- !is.null(sigeps_breaks)
cat('model {
for(i in 1:n) {
fit[i] <- trend[i]',file=tmp)
if(isDetcycle | isStochcycle) cat(' + cycle[i]',file=tmp, append=T)
if(isAR1noise | isAR1process) cat(' + ar1[i]',file=tmp, append=T)
cat('
y[i] ~ dnorm(fit[i], tau_eps',file=tmp, append=T)      ###### y[i] ~ dnorm(trend[i], tau_eps'
if(isSigeps_split) cat('[sigeps_split[i]]', file=tmp, append=T)
cat(')
ypp[i] ~ dnorm(fit[i], tau_eps',file=tmp, append=T)    ##### ypp[i] ~ dnorm(trend[i], tau_eps'
if(isSigeps_split) cat('[sigeps_split[i]]', file=tmp, append=T)
cat(')
}
for(i in 2:n) {',file=tmp, append=T)
if(normalizedRate) cat('
trend[i] <- trend[i-1] + rate[i-1]*dt[i]',file=tmp, append=T)
if(!normalizedRate) cat('
trend[i] <- trend[i-1] + rate[i-1]*dt2[i]',file=tmp, append=T)
cat(')
rate[i] ~ dnorm(rate[i-1], tau_xi)
',file=tmp, append=T)
if(isAR1noise) cat('
res[i] <- y[i]-fit[i]
ar1[i] <- res[i-1]*(phi^dt[i])
',file=tmp, append=T)
if(isAR1process) cat('
ar1[i] ~ dnorm(ar1[i-1]*(phi^dt[i]), tau_psi)
',file=tmp, append=T)
if(isStochcycle) cat('
for(i_ps in 1:n_ps) {
cc[i,i_ps] ~ dnorm(cc[i-1,i_ps]*cos(2*pi*dt2[i]/p_s[i_ps]) + c_star[i-1,i_ps]*sin(2*pi*dt2[i]/p_s[i_ps]), tau_omega[i_ps])
c_star[i,i_ps] ~ dnorm(-cc[i-1,i_ps]*sin(2*pi*dt2[i]/p_s[i_ps]) + c_star[i-1,i_ps]*cos(2*pi*dt2[i]/p_s[i_ps]), tau_omega[i_ps])
cycle_s[i,i_ps] <- cc[i,i_ps]
}
', file=tmp, append=T)
if(isDetcycle) cat('
for(i_pd in 1:n_pd) {
cycle_d[i,i_pd] <- betaS[i_pd]*sin(2*pi*tt[i]/p_d[i_pd]) + betaC[i_pd]*cos(2*pi*tt[i]/p_d[i_pd])
}
', file=tmp, append=T)
if(isStochcycle & isDetcycle) cat('
cycle[i] <- sum(cycle_s[i,1:n_ps]) + sum(cycle_d[i,1:n_ps])
', file=tmp, append=T)
if(isStochcycle & !isDetcycle) cat('
cycle[i] <- sum(cycle_s[i,1:n_ps])
', file=tmp, append=T)
if(!isStochcycle & isDetcycle) cat('
cycle[i] <- sum(cycle_d[i,1:n_pd])
', file=tmp, append=T)
cat('  }
# initialize trend and rate
trend[1] ~ dnorm(0, trendprecinit[1])  ###y[1]
rate[1] ~ dnorm(0, rateprecinit[1])
', file=tmp, append=T)
if(isAR1noise) cat('
res[1] <- 0
ar1[1] <- 0
', file=tmp, append=T)
if(isAR1process) cat('
ar1[1] <- 0
', file=tmp, append=T)
if(isStochcycle) cat('
for(i_ps in 1:n_ps) {
cc[1,i_ps] ~ dnorm(0, 0.001)
c_star[1,i_ps] ~ dnorm(0, 0.001)
cycle_s[1,i_ps] <- cc[1,i_ps]
cc_kf[i_ps] <- cc[n,i_ps]*cos(2*pi*dt2[n]/p_s[i_ps]) + c_star[n,i_ps]*sin(2*pi*dt2[n]/p_s[i_ps])
}
', file=tmp, append=T)
if(isDetcycle) cat('
for(i_pd in 1:n_pd) {
cycle_d[1,i_pd] <- betaS[i_pd]*sin(2*pi*tt[1]/p_d[i_pd]) + betaC[i_pd]*cos(2*pi*tt[1]/p_d[i_pd])
}
', file=tmp, append=T)
if(isStochcycle & isDetcycle) cat('
cycle[1] <- sum(cycle_s[1,1:n_ps]) + sum(cycle_d[1,1:n_ps])
', file=tmp, append=T)
if(isStochcycle & !isDetcycle) cat('
cycle[1] <- sum(cycle_s[1,1:n_ps])
', file=tmp, append=T)
if(!isStochcycle & isDetcycle) cat('
cycle[1] <- sum(cycle_d[1,1:n_pd])
', file=tmp, append=T)
cat('
for(i_eps in 1:n_sigeps_split) {
tau_eps[i_eps] <- pow(sig_eps[i_eps], -2)
sig_eps[i_eps]', file=tmp, append=T)
if(!is.numeric(sig_eps_prior)) cat(' ~',sig_eps_prior, file=tmp, append=T)
if(is.numeric(sig_eps_prior)) {
cat(' <- ',sig_eps_prior, file=tmp, append=T)
if(length(sig_eps_prior)>1) cat('[i_eps]', file=tmp, append=T)
}
cat('
}
tau_xi <- pow(sig_xi, -2)
sig_xi', file=tmp, append=T)
if(!is.numeric(sig_xi_prior)) cat(' ~', sig_xi_prior, file=tmp, append=T)
if(is.numeric(sig_xi_prior)) cat(' <-', sig_xi_prior, file=tmp, append=T)
if(isStochcycle) {
cat('
for(i_ps in 1:n_ps) {
tau_omega[i_ps] <- pow(sig_omega[i_ps], -2)
sig_omega[i_ps]', file=tmp, append=T)
if(!is.numeric(sig_omega_prior)) cat(' ~',sig_omega_prior, file=tmp, append=T)
if(is.numeric(sig_omega_prior)) {
cat(' <-',sig_omega_prior, file=tmp, append=T)
if(length(sig_omega_prior)>1) cat('[i_ps]', file=tmp, append=T)
}
cat('
}', file=tmp, append=T)
}
if(isDetcycle) {
cat('
for(i_pd in 1:n_pd) {
betaS[i_pd] ~ dnorm(0, 0.0001)
betaC[i_pd] ~ dnorm(0, 0.0001)
}
', file=tmp, append=T)
}
if(isAR1process) {
cat('
tau_psi <- pow(sig_psi, -2)
sig_psi', file=tmp, append=T)
if(!is.numeric(sig_psi_prior)) cat(' ~',sig_psi_prior, file=tmp, append=T)
if(is.numeric(sig_psi_prior)) {
cat(' <-',sig_psi_prior, file=tmp, append=T)
}
}
if(isAR1process | isAR1noise) {
cat('
phi', file=tmp, append=T)
if(!is.numeric(phi_prior)) cat(' ~', phi_prior, file=tmp, append=T)
if(is.numeric(phi_prior)) cat(' <-', phi_prior, file=tmp, append=T)
}
cat('
}
', file=tmp, append=T)
if(!runmodel) {
aschar <- readLines(tmp)
for(i in 1:length(aschar)) cat(aschar[i],"\n")
} else {
## bundle data
if(is.null(x)) x <- 1:length(y)
dt1 <- c(NA, diff(x))
SS_data <- list(y=y,
n=length(y),
dt=dt1/mean(dt1,na.rm=T),
dt2=dt1,
tt=x-x[1], pi=pi, x=x)
SS_data$y[is.nan(SS_data$y)] <- NA
SS_data$trendprecinit <- 1/var(SS_data$y, na.rm=T)
SS_data$rateprecinit <- 1/var(diff(SS_data$y)/diff(SS_data$tt), na.rm=T)
SS_data$sigeps_split <- as.numeric(cut(SS_data$x, c(min(SS_data$x),sigeps_breaks,max(SS_data$x)), include.lowest=T))
SS_data$n_sigeps_split <- max(SS_data$sigeps_split)
if(is.numeric(phi_prior)) SS_data$phi_prior <- phi_prior
SS_data$p_s <- stochasticPeriods
SS_data$p_d <- deterministicPeriods
SS_data$n_ps <- length(stochasticPeriods)
SS_data$n_pd <- length(deterministicPeriods)
## run JAGS
tstart <- Sys.time()
cat("started at ")
print(tstart)
jagsout <- jagsUI::jags(model.file=tmp, data=SS_data,
parameters.to.save=c("trend","rate",
"cycle","cycle_s","cycle_d",
"ar1",
"fit","ypp",
"sig_eps","sig_xi","sig_omega",
"sig_psi",   ### added sig_psi
"phi"),
n.chains=ncores, parallel=T, n.iter=niter,
n.burnin=niter/2, n.thin=niter/outlength/2)
now <- Sys.time()
totaltime <- now - tstart
print(totaltime)
cat("finished at ")
print(Sys.time())
cat("\n","Max Rhat:",max(unlist(jagsout$Rhat), na.rm=T))
cat("\n","Min n.eff:",min(unlist(jagsout$n.eff), na.rm=T))
return(jagsout)
}
}
runSS_v2(y=thedata$ALT_FDM,
x=thedata$date,
niter=10000,
deterministicPeriods = c(1,0.5),
AR1="noise",phi_prior = "dunif(0,0.8)",
runmodel=F)  #1000k in 30 min
runSS_v2(y=thedata$ALT_FDM,
x=thedata$date,
niter=10000,
deterministicPeriods = c(1,0.5),
AR1="noise",phi_prior = "dunif(0,0.8)",
runmodel=F,normalizedRate = F)  #1000k in 30 min
results2 <-
runSS_v2(y=thedata$ALT_FDM,
x=thedata$date,
niter=10000,
deterministicPeriods = c(1,0.5),
AR1="noise",phi_prior = "dunif(0,0.8)",
runmodel=F,normalizedRate = F)  #1000k in 30 min
results2 <-
runSS_v2(y=thedata$ALT_FDM,
x=thedata$date,
niter=10000,
deterministicPeriods = c(1,0.5),
AR1="noise",phi_prior = "dunif(0,0.8)",
runmodel=T,normalizedRate = F)  #1000k in 30 min
results2 <-
runSS_v2(y=thedata$ALT_FDM,
x=thedata$date,
niter=10000,
deterministicPeriods = c(1,0.5),
AR1="noise",phi_prior = "dunif(0,0.8)",
runmodel=T,normalizedRate = T)  #1000k in 30 min
runSS_v2 <- function(y, x=NULL, runmodel=T,
niter=2000, ncores=NULL, parallel=TRUE,outlength=1000,
stochasticPeriods=NULL, deterministicPeriods=NULL, AR1=FALSE,
sig_eps_prior="dexp(0.2)",
sig_xi_prior="dexp(0.2)",
sig_omega_prior="dexp(0.2)",
sig_psi_prior="dexp(0.2)",
phi_prior="dunif(0,1)",
sigeps_breaks=NULL,
normalizedRate=TRUE) {
if(is.null(ncores)) ncores <- parallel::detectCores()-1
if(is.na(ncores)) stop("Unable to detect number of cores, please set ncores= manually.")
tmp <- tempfile()
isAR1noise <- AR1=="noise"
isAR1process <- AR1=="process"
if(AR1==F) {
isAR1noise <- isAR1process <- F
}
isDetcycle <- !is.null(deterministicPeriods)
isStochcycle <- !is.null(stochasticPeriods)
isSigeps_split <- !is.null(sigeps_breaks)
cat('model {
for(i in 1:n) {
fit[i] <- trend[i]',file=tmp)
if(isDetcycle | isStochcycle) cat(' + cycle[i]',file=tmp, append=T)
if(isAR1noise | isAR1process) cat(' + ar1[i]',file=tmp, append=T)
cat('
y[i] ~ dnorm(fit[i], tau_eps',file=tmp, append=T)      ###### y[i] ~ dnorm(trend[i], tau_eps'
if(isSigeps_split) cat('[sigeps_split[i]]', file=tmp, append=T)
cat(')
ypp[i] ~ dnorm(fit[i], tau_eps',file=tmp, append=T)    ##### ypp[i] ~ dnorm(trend[i], tau_eps'
if(isSigeps_split) cat('[sigeps_split[i]]', file=tmp, append=T)
cat(')
}
for(i in 2:n) {',file=tmp, append=T)
if(normalizedRate) cat('
trend[i] <- trend[i-1] + rate[i-1]*dt[i]',file=tmp, append=T)
if(!normalizedRate) cat('
trend[i] <- trend[i-1] + rate[i-1]*dt2[i]',file=tmp, append=T)
cat('
rate[i] ~ dnorm(rate[i-1], tau_xi)
',file=tmp, append=T)
if(isAR1noise) cat('
res[i] <- y[i]-fit[i]
ar1[i] <- res[i-1]*(phi^dt[i])
',file=tmp, append=T)
if(isAR1process) cat('
ar1[i] ~ dnorm(ar1[i-1]*(phi^dt[i]), tau_psi)
',file=tmp, append=T)
if(isStochcycle) cat('
for(i_ps in 1:n_ps) {
cc[i,i_ps] ~ dnorm(cc[i-1,i_ps]*cos(2*pi*dt2[i]/p_s[i_ps]) + c_star[i-1,i_ps]*sin(2*pi*dt2[i]/p_s[i_ps]), tau_omega[i_ps])
c_star[i,i_ps] ~ dnorm(-cc[i-1,i_ps]*sin(2*pi*dt2[i]/p_s[i_ps]) + c_star[i-1,i_ps]*cos(2*pi*dt2[i]/p_s[i_ps]), tau_omega[i_ps])
cycle_s[i,i_ps] <- cc[i,i_ps]
}
', file=tmp, append=T)
if(isDetcycle) cat('
for(i_pd in 1:n_pd) {
cycle_d[i,i_pd] <- betaS[i_pd]*sin(2*pi*tt[i]/p_d[i_pd]) + betaC[i_pd]*cos(2*pi*tt[i]/p_d[i_pd])
}
', file=tmp, append=T)
if(isStochcycle & isDetcycle) cat('
cycle[i] <- sum(cycle_s[i,1:n_ps]) + sum(cycle_d[i,1:n_ps])
', file=tmp, append=T)
if(isStochcycle & !isDetcycle) cat('
cycle[i] <- sum(cycle_s[i,1:n_ps])
', file=tmp, append=T)
if(!isStochcycle & isDetcycle) cat('
cycle[i] <- sum(cycle_d[i,1:n_pd])
', file=tmp, append=T)
cat('  }
# initialize trend and rate
trend[1] ~ dnorm(0, trendprecinit[1])  ###y[1]
rate[1] ~ dnorm(0, rateprecinit[1])
', file=tmp, append=T)
if(isAR1noise) cat('
res[1] <- 0
ar1[1] <- 0
', file=tmp, append=T)
if(isAR1process) cat('
ar1[1] <- 0
', file=tmp, append=T)
if(isStochcycle) cat('
for(i_ps in 1:n_ps) {
cc[1,i_ps] ~ dnorm(0, 0.001)
c_star[1,i_ps] ~ dnorm(0, 0.001)
cycle_s[1,i_ps] <- cc[1,i_ps]
cc_kf[i_ps] <- cc[n,i_ps]*cos(2*pi*dt2[n]/p_s[i_ps]) + c_star[n,i_ps]*sin(2*pi*dt2[n]/p_s[i_ps])
}
', file=tmp, append=T)
if(isDetcycle) cat('
for(i_pd in 1:n_pd) {
cycle_d[1,i_pd] <- betaS[i_pd]*sin(2*pi*tt[1]/p_d[i_pd]) + betaC[i_pd]*cos(2*pi*tt[1]/p_d[i_pd])
}
', file=tmp, append=T)
if(isStochcycle & isDetcycle) cat('
cycle[1] <- sum(cycle_s[1,1:n_ps]) + sum(cycle_d[1,1:n_ps])
', file=tmp, append=T)
if(isStochcycle & !isDetcycle) cat('
cycle[1] <- sum(cycle_s[1,1:n_ps])
', file=tmp, append=T)
if(!isStochcycle & isDetcycle) cat('
cycle[1] <- sum(cycle_d[1,1:n_pd])
', file=tmp, append=T)
cat('
for(i_eps in 1:n_sigeps_split) {
tau_eps[i_eps] <- pow(sig_eps[i_eps], -2)
sig_eps[i_eps]', file=tmp, append=T)
if(!is.numeric(sig_eps_prior)) cat(' ~',sig_eps_prior, file=tmp, append=T)
if(is.numeric(sig_eps_prior)) {
cat(' <- ',sig_eps_prior, file=tmp, append=T)
if(length(sig_eps_prior)>1) cat('[i_eps]', file=tmp, append=T)
}
cat('
}
tau_xi <- pow(sig_xi, -2)
sig_xi', file=tmp, append=T)
if(!is.numeric(sig_xi_prior)) cat(' ~', sig_xi_prior, file=tmp, append=T)
if(is.numeric(sig_xi_prior)) cat(' <-', sig_xi_prior, file=tmp, append=T)
if(isStochcycle) {
cat('
for(i_ps in 1:n_ps) {
tau_omega[i_ps] <- pow(sig_omega[i_ps], -2)
sig_omega[i_ps]', file=tmp, append=T)
if(!is.numeric(sig_omega_prior)) cat(' ~',sig_omega_prior, file=tmp, append=T)
if(is.numeric(sig_omega_prior)) {
cat(' <-',sig_omega_prior, file=tmp, append=T)
if(length(sig_omega_prior)>1) cat('[i_ps]', file=tmp, append=T)
}
cat('
}', file=tmp, append=T)
}
if(isDetcycle) {
cat('
for(i_pd in 1:n_pd) {
betaS[i_pd] ~ dnorm(0, 0.0001)
betaC[i_pd] ~ dnorm(0, 0.0001)
}
', file=tmp, append=T)
}
if(isAR1process) {
cat('
tau_psi <- pow(sig_psi, -2)
sig_psi', file=tmp, append=T)
if(!is.numeric(sig_psi_prior)) cat(' ~',sig_psi_prior, file=tmp, append=T)
if(is.numeric(sig_psi_prior)) {
cat(' <-',sig_psi_prior, file=tmp, append=T)
}
}
if(isAR1process | isAR1noise) {
cat('
phi', file=tmp, append=T)
if(!is.numeric(phi_prior)) cat(' ~', phi_prior, file=tmp, append=T)
if(is.numeric(phi_prior)) cat(' <-', phi_prior, file=tmp, append=T)
}
cat('
}
', file=tmp, append=T)
if(!runmodel) {
aschar <- readLines(tmp)
for(i in 1:length(aschar)) cat(aschar[i],"\n")
} else {
## bundle data
if(is.null(x)) x <- 1:length(y)
dt1 <- c(NA, diff(x))
SS_data <- list(y=y,
n=length(y),
dt=dt1/mean(dt1,na.rm=T),
dt2=dt1,
tt=x-x[1], pi=pi, x=x)
SS_data$y[is.nan(SS_data$y)] <- NA
SS_data$trendprecinit <- 1/var(SS_data$y, na.rm=T)
SS_data$rateprecinit <- 1/var(diff(SS_data$y)/diff(SS_data$tt), na.rm=T)
SS_data$sigeps_split <- as.numeric(cut(SS_data$x, c(min(SS_data$x),sigeps_breaks,max(SS_data$x)), include.lowest=T))
SS_data$n_sigeps_split <- max(SS_data$sigeps_split)
if(is.numeric(phi_prior)) SS_data$phi_prior <- phi_prior
SS_data$p_s <- stochasticPeriods
SS_data$p_d <- deterministicPeriods
SS_data$n_ps <- length(stochasticPeriods)
SS_data$n_pd <- length(deterministicPeriods)
## run JAGS
tstart <- Sys.time()
cat("started at ")
print(tstart)
jagsout <- jagsUI::jags(model.file=tmp, data=SS_data,
parameters.to.save=c("trend","rate",
"cycle","cycle_s","cycle_d",
"ar1",
"fit","ypp",
"sig_eps","sig_xi","sig_omega",
"sig_psi",   ### added sig_psi
"phi"),
n.chains=ncores, parallel=T, n.iter=niter,
n.burnin=niter/2, n.thin=niter/outlength/2)
now <- Sys.time()
totaltime <- now - tstart
print(totaltime)
cat("finished at ")
print(Sys.time())
cat("\n","Max Rhat:",max(unlist(jagsout$Rhat), na.rm=T))
cat("\n","Min n.eff:",min(unlist(jagsout$n.eff), na.rm=T))
return(jagsout)
}
}
results2 <-
runSS_v2(y=thedata$ALT_FDM,
x=thedata$date,
niter=10000,
deterministicPeriods = c(1,0.5),
AR1="noise",phi_prior = "dunif(0,0.8)",
runmodel=T,normalizedRate = T)  #1000k in 30 min
envelope(results1, p="rate")
caterpillar(pull_post(jags_df(results1),p="sig"))
# results1a <- results1
results1 <- results2
envelope(results1, p="rate")
caterpillar(pull_post(jags_df(results1),p="sig"))
results2 <-
runSS_v2(y=thedata$ALT_FDM,
x=thedata$date,
niter=10000,
deterministicPeriods = c(1,0.5),
AR1="noise",phi_prior = "dunif(0,0.8)",
runmodel=T,normalizedRate = F)  #1000k in 30 min
# results1a <- results1
results1 <- results2
envelope(results1, p="rate")
caterpillar(pull_post(jags_df(results1),p="sig"))
library(SSjags)
help(runSS)
library(SSjags)
library(SSjags)
setwd("~/Documents/statespace2/test/data")
thedata <- read.csv("TSupdate_basin6.csv")
results1 <- runSS(y=thedata$GRACE_CSMBA,
x=thedata$date,
niter=600*1000,
stochasticPeriods = c(1,0.5))  #100k in 2.5 min, 600k in 14min
results1 <- runSS(y=thedata$GRACE_CSMBA,
x=thedata$date,
niter=6*1000,
stochasticPeriods = c(1,0.5))  #100k in 2.5 min, 600k in 14min
plot_components(results1,y=thedata$GRACE_CSMBA,x=thedata$date)
help(envelope)
aa <- cranlogs::cran_downloads("jagshelper",from="2022-10-10")
aa <- cranlogs::cran_downloads("jagshelper",from="2022-10-10")
aa
library(SSjags)
help(runSS)
library(SSjags)
help(runSS)
library(SSjags)
aa <- cranlogs::cran_downloads("jagshelper",from="2022-10-10")
aa
library(jagshelper)
aa <- jags_df(SS_out)
install.packages("corrplot")
library(corrplot)
corrplot(cor(aa))
corrplot(cor(pull_post(aa,"sig")))
.PATH
Sys.getenv("PATH")
library(SSjags)
library(SSjags)
cranlogs::cran_downloads("jagshelper",from="2022-10-10")
sum(cranlogs::cran_downloads("jagshelper",from="2022-10-10")$count)
help(SSjags)
library(SSjags)
help(SSjags)
library(SSjags)
help(SSjags)
library(SSjags)
help(SSjags)
library(SSjags)
help(SSjags)
library(SSjags)
# example call
jagsout <- runSS(y = SS_data$y,                  # vector of observations
x = SS_data$x,                  # associated time measurements
stochasticPeriods = c(1, 0.5),  # stochastic cycle periods
niter = 10000)                  # number of MCMC iterations)
library(SSjags)
help(runSS)
library(SSjags)
