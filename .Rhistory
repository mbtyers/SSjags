', file=tmp, append=T)
}
if(isAR1process) {
cat('
tau_psi <- pow(sig_psi, -2)
sig_psi', file=tmp, append=T)
if(!is.numeric(sig_psi_prior)) cat(' ~',sig_psi_prior, file=tmp, append=T)
if(is.numeric(sig_psi_prior)) {
cat(' <-',sig_psi_prior, file=tmp, append=T)
}
if(!is.numeric(sig_psi_prior)) {
cat('
sig_psi_prior ~',sig_psi_prior, file=tmp, append=T)
}
}
if(isAR1process | isAR1noise) {
cat('
phi', file=tmp, append=T)
if(!is.numeric(phi_prior)) cat(' ~', phi_prior, file=tmp, append=T)
if(is.numeric(phi_prior)) cat(' <-', phi_prior, file=tmp, append=T)
if(!is.numeric(phi_prior)) {
cat('
phi_prior ~',phi_prior, file=tmp, append=T)
}
}
cat('
}
', file=tmp, append=T)
if(!runmodel) {
aschar <- readLines(tmp)
for(i in 1:length(aschar)) cat(aschar[i],"\n")
} else {
# ## bundle data
# if(is.null(x)) x <- 1:length(y)
# dt1 <- c(NA, diff(x))
# SS_data <- list(y=y,
#                 n=length(y),
#                 dt=dt1/mean(dt1,na.rm=T),
#                 dt2=dt1,
#                 tt=x-x[1], pi=pi, x=x)
# SS_data$y[is.nan(SS_data$y)] <- NA
# SS_data$trendprecinit <- 1/var(SS_data$y, na.rm=T)
# SS_data$rateprecinit <- 1/var(diff(SS_data$y)/diff(SS_data$tt), na.rm=T)  ### make this normalized time step!!
#
# SS_data$sigeps_split <- as.numeric(cut(SS_data$x, c(min(SS_data$x),sigeps_breaks,max(SS_data$x)), include.lowest=T))
# SS_data$n_sigeps_split <- max(SS_data$sigeps_split)
#
# if(is.numeric(phi_prior)) SS_data$phi_prior <- phi_prior
# SS_data$p_s <- stochasticPeriods
# SS_data$p_d <- deterministicPeriods
# SS_data$n_ps <- length(stochasticPeriods)
# SS_data$n_pd <- length(deterministicPeriods)
SS_data <- make_SS_data(y=y,
x=x,
stochasticPeriods=stochasticPeriods,
deterministicPeriods=deterministicPeriods,
AR1=AR1,
sig_eps_prior=sig_eps_prior,
sig_xi_prior=sig_xi_prior,
sig_omega_prior=sig_omega_prior,
sig_psi_prior=sig_psi_prior,
phi_prior=phi_prior,
sigeps_breaks=sigeps_breaks,
sigxi_breaks=sigxi_breaks,
normalizedRate=normalizedRate)
## run JAGS
tstart <- Sys.time()
cat("started at ")
print(tstart)
jagsout <- jagsUI::jags(model.file=tmp, data=SS_data,
parameters.to.save=c("trend","rate",
"cycle","cycle_s","cycle_d",
"ar1",
"fit","ypp",
"sig_eps","sig_eps_prior",
"sig_xi", "sig_xi_prior",
"sig_omega", "sig_omega_prior",
"sig_psi", "sig_psi_prior",
"phi", "phi_prior"),
n.chains=ncores, parallel=T, n.iter=niter,
n.burnin=niter/2, n.thin=niter/outlength/2)
now <- Sys.time()
totaltime <- now - tstart
print(totaltime)
cat("finished at ")
print(Sys.time())
cat("\n","Max Rhat:",max(unlist(jagsout$Rhat), na.rm=T))
cat("\n","Min n.eff:",min(unlist(jagsout$n.eff), na.rm=T))
return(jagsout)
}
}
nullmodel <- runSS(y=y, x=x,
runmodel=T,
niter=500*1000, ncores=10,
# sig_xi_prior=c(6.217059e-04, 1.903386e-03, 4.709402e-05),
sig_xi_prior = "dexp(1000)",
sigeps_breaks = thebreaks,
sigxi_breaks = thebreaks)
nullmodel <- runSS(y=y, x=x,
runmodel=F,
niter=500*1000, ncores=10,
# sig_xi_prior=c(6.217059e-04, 1.903386e-03, 4.709402e-05),
sig_xi_prior = "dexp(1000)",
sigeps_breaks = thebreaks,
sigxi_breaks = thebreaks)
1/sqrt(3663.725)
make_SS_data <- function(y, x=NULL,
stochasticPeriods=NULL, deterministicPeriods=NULL, AR1=FALSE,
sig_eps_prior="dexp(0.2)",
sig_xi_prior="dexp(0.2)",
sig_omega_prior="dexp(0.2)",
sig_psi_prior="dexp(0.2)",
phi_prior="dunif(0,1)",
sigeps_breaks=NULL,
sigxi_breaks=NULL,
normalizedRate=TRUE) {
## bundle data
if(is.null(x)) x <- 1:length(y)
dt1 <- c(NA, diff(x))
SS_data <- list(y=y,
n=length(y),
startpoint=y[1],
dt=dt1/mean(dt1,na.rm=T),
dt2=dt1,
tt=x-x[1], pi=pi, x=x)
SS_data$y[is.nan(SS_data$y)] <- NA
SS_data$trendprecinit <- 1/var(SS_data$y, na.rm=T)
SS_data$rateprecinit <- 1/var(diff(SS_data$y)/diff(SS_data$tt), na.rm=T)  ### make this normalized time step!!
SS_data$sigeps_split <- as.numeric(cut(SS_data$x, c(min(SS_data$x),sigeps_breaks,max(SS_data$x)), include.lowest=T))
SS_data$n_sigeps_split <- max(SS_data$sigeps_split)
SS_data$sigxi_split <- as.numeric(cut(SS_data$x, c(min(SS_data$x),sigxi_breaks,max(SS_data$x)), include.lowest=T))
SS_data$n_sigxi_split <- max(SS_data$sigxi_split)
if(is.numeric(phi_prior)) SS_data$phi_prior <- phi_prior
SS_data$p_s <- stochasticPeriods
SS_data$p_d <- deterministicPeriods
SS_data$n_ps <- length(stochasticPeriods)
SS_data$n_pd <- length(deterministicPeriods)
if(is.numeric(sig_eps_prior) & length(sig_eps_prior)>1) SS_data$sig_eps_prior_num <- sig_eps_prior
if(is.numeric(sig_xi_prior) & length(sig_xi_prior)>1) SS_data$sig_xi_prior_num <- sig_xi_prior
if(is.numeric(sig_omega_prior) & length(sig_omega_prior)>1) SS_data$sig_omega_prior_num <- sig_omega_prior
return(SS_data)
}
}
runSS <- function(y, x=NULL, runmodel=T,
niter=2000, ncores=NULL, parallel=TRUE,outlength=1000,
stochasticPeriods=NULL, deterministicPeriods=NULL, AR1=FALSE,
sig_eps_prior="dexp(0.2)",
sig_xi_prior="dexp(0.2)",
sig_omega_prior="dexp(0.2)",
sig_psi_prior="dexp(0.2)",
phi_prior="dunif(0,1)",
sigeps_breaks=NULL,
sigxi_breaks=NULL,
normalizedRate=TRUE) {
if(is.null(ncores)) ncores <- parallel::detectCores()-1
if(is.na(ncores)) stop("Unable to detect number of cores, please set ncores= manually.")
tmp <- tempfile()
isAR1noise <- AR1=="noise"
isAR1process <- (AR1=="process")|(AR1==T)
if(AR1==F) {
isAR1noise <- isAR1process <- F
}
isDetcycle <- !is.null(deterministicPeriods)
isStochcycle <- !is.null(stochasticPeriods)
isSigeps_split <- !is.null(sigeps_breaks)
isSigxi_split <- !is.null(sigxi_breaks)
cat('model {
for(i in 1:n) {
fit[i] <- trend[i]',file=tmp)
if(isDetcycle | isStochcycle) cat(' + cycle[i]',file=tmp, append=T)
if(isAR1noise | isAR1process) cat(' + ar1[i]',file=tmp, append=T)
cat('
y[i] ~ dnorm(fit[i], tau_eps',file=tmp, append=T)      ###### y[i] ~ dnorm(trend[i], tau_eps'
if(isSigeps_split) cat('[sigeps_split[i]]', file=tmp, append=T)
cat(')
ypp[i] ~ dnorm(fit[i], tau_eps',file=tmp, append=T)    ##### ypp[i] ~ dnorm(trend[i], tau_eps'
if(isSigeps_split) cat('[sigeps_split[i]]', file=tmp, append=T)
cat(')
}
for(i in 2:n) {',file=tmp, append=T)
if(normalizedRate) cat('
trend[i] <- trend[i-1] + rate[i-1]*dt[i]',file=tmp, append=T)
if(!normalizedRate) cat('
trend[i] <- trend[i-1] + rate[i-1]*dt2[i]',file=tmp, append=T)
cat('
rate[i] ~ dnorm(rate[i-1], tau_xi',file=tmp, append=T)    ##### ypp[i] ~ dnorm(trend[i], tau_eps'
if(isSigxi_split) cat('[sigxi_split[i]]', file=tmp, append=T)
cat(')
',file=tmp, append=T)
if(isAR1noise) cat('
res[i] <- y[i]-fit[i]
ar1[i] <- res[i-1]*(phi^dt[i])
',file=tmp, append=T)
if(isAR1process) cat('
ar1[i] ~ dnorm(ar1[i-1]*(phi^dt[i]), tau_psi)
',file=tmp, append=T)
if(isStochcycle) cat('
for(i_ps in 1:n_ps) {
cc[i,i_ps] ~ dnorm(cc[i-1,i_ps]*cos(2*pi*dt2[i]/p_s[i_ps]) + c_star[i-1,i_ps]*sin(2*pi*dt2[i]/p_s[i_ps]), tau_omega[i_ps])
c_star[i,i_ps] ~ dnorm(-cc[i-1,i_ps]*sin(2*pi*dt2[i]/p_s[i_ps]) + c_star[i-1,i_ps]*cos(2*pi*dt2[i]/p_s[i_ps]), tau_omega[i_ps])
cycle_s[i,i_ps] <- cc[i,i_ps]
}
', file=tmp, append=T)
if(isDetcycle) cat('
for(i_pd in 1:n_pd) {
cycle_d[i,i_pd] <- betaS[i_pd]*sin(2*pi*tt[i]/p_d[i_pd]) + betaC[i_pd]*cos(2*pi*tt[i]/p_d[i_pd])
}
', file=tmp, append=T)
if(isStochcycle & isDetcycle) cat('
cycle[i] <- sum(cycle_s[i,1:n_ps]) + sum(cycle_d[i,1:n_ps])
', file=tmp, append=T)
if(isStochcycle & !isDetcycle) cat('
cycle[i] <- sum(cycle_s[i,1:n_ps])
', file=tmp, append=T)
if(!isStochcycle & isDetcycle) cat('
cycle[i] <- sum(cycle_d[i,1:n_pd])
', file=tmp, append=T)
cat('  }
# initialize trend and rate
trend[1] ~ dnorm(startpoint, trendprecinit[1])  ### 0
rate[1] ~ dnorm(0, rateprecinit[1])
', file=tmp, append=T)
if(isAR1noise) cat('
res[1] <- 0
ar1[1] <- 0
', file=tmp, append=T)
if(isAR1process) cat('
ar1[1] <- 0
', file=tmp, append=T)
if(isStochcycle) cat('
for(i_ps in 1:n_ps) {
cc[1,i_ps] ~ dnorm(0, 0.001)
c_star[1,i_ps] ~ dnorm(0, 0.001)
cycle_s[1,i_ps] <- cc[1,i_ps]
cc_kf[i_ps] <- cc[n,i_ps]*cos(2*pi*dt2[n]/p_s[i_ps]) + c_star[n,i_ps]*sin(2*pi*dt2[n]/p_s[i_ps])
}
', file=tmp, append=T)
if(isDetcycle) cat('
for(i_pd in 1:n_pd) {
cycle_d[1,i_pd] <- betaS[i_pd]*sin(2*pi*tt[1]/p_d[i_pd]) + betaC[i_pd]*cos(2*pi*tt[1]/p_d[i_pd])
}
', file=tmp, append=T)
if(isStochcycle & isDetcycle) cat('
cycle[1] <- sum(cycle_s[1,1:n_ps]) + sum(cycle_d[1,1:n_ps])
', file=tmp, append=T)
if(isStochcycle & !isDetcycle) cat('
cycle[1] <- sum(cycle_s[1,1:n_ps])
', file=tmp, append=T)
if(!isStochcycle & isDetcycle) cat('
cycle[1] <- sum(cycle_d[1,1:n_pd])
', file=tmp, append=T)
cat('
for(i_eps in 1:n_sigeps_split) {
tau_eps[i_eps] <- pow(sig_eps[i_eps], -2)
sig_eps[i_eps]', file=tmp, append=T)
if(!is.numeric(sig_eps_prior)) cat(' ~',sig_eps_prior, file=tmp, append=T)
if(is.numeric(sig_eps_prior)) {
if(length(sig_eps_prior)==1) cat(' <- ',sig_eps_prior, file=tmp, append=T)
if(length(sig_eps_prior)>1) cat(' <- sig_eps_prior_num[i_eps]', file=tmp, append=T)
}
if(!is.numeric(sig_eps_prior)) {
cat('
sig_eps_prior[i_eps] ~',sig_eps_prior, file=tmp, append=T)
}
cat('
}
# tau_eps <- pow(sig_eps, -2)
# sig_eps', file=tmp, append=T)
if(!is.numeric(sig_eps_prior)) cat(' ~', sig_eps_prior, file=tmp, append=T)
if(is.numeric(sig_eps_prior)) cat(' <-', sig_eps_prior, file=tmp, append=T)
if(!is.numeric(sig_eps_prior)) {
cat('
# sig_eps_prior ~', sig_eps_prior, file=tmp, append=T)
}
cat('
for(i_xi in 1:n_sigxi_split) {
tau_xi[i_xi] <- pow(sig_xi[i_xi], -2)
sig_xi[i_xi]', file=tmp, append=T)
if(!is.numeric(sig_xi_prior)) cat(' ~',sig_xi_prior, file=tmp, append=T)
if(is.numeric(sig_xi_prior)) {
if(length(sig_xi_prior)==1) cat(' <- ',sig_xi_prior, file=tmp, append=T)
if(length(sig_xi_prior)>1) cat(' <- sig_xi_prior_num[i_xi]', file=tmp, append=T)
}
if(!is.numeric(sig_xi_prior)) {
cat('
sig_xi_prior[i_xi] ~',sig_xi_prior, file=tmp, append=T)
}
cat('
}
# tau_xi <- pow(sig_xi, -2)
# sig_xi', file=tmp, append=T)
if(!is.numeric(sig_xi_prior)) cat(' ~', sig_xi_prior, file=tmp, append=T)
if(is.numeric(sig_xi_prior)) cat(' <-', sig_xi_prior, file=tmp, append=T)
if(!is.numeric(sig_xi_prior)) {
cat('
# sig_xi_prior ~', sig_xi_prior, file=tmp, append=T)
}
if(isStochcycle) {
cat('
for(i_ps in 1:n_ps) {
tau_omega[i_ps] <- pow(sig_omega[i_ps], -2)
sig_omega[i_ps]', file=tmp, append=T)
if(!is.numeric(sig_omega_prior)) cat(' ~',sig_omega_prior, file=tmp, append=T)
if(is.numeric(sig_omega_prior)) {
if(length(sig_omega_prior)==1) cat(' <- ',sig_omega_prior, file=tmp, append=T)
if(length(sig_omega_prior)>1) cat(' <- sig_omega_prior_num[i_ps]', file=tmp, append=T)
}
if(!is.numeric(sig_omega_prior)) {
cat('
sig_omega_prior[i_ps] ~',sig_omega_prior, file=tmp, append=T)
}
cat('
}', file=tmp, append=T)
}
if(isDetcycle) {
cat('
for(i_pd in 1:n_pd) {
betaS[i_pd] ~ dnorm(0, 0.0001)
betaC[i_pd] ~ dnorm(0, 0.0001)
}
', file=tmp, append=T)
}
if(isAR1process) {
cat('
tau_psi <- pow(sig_psi, -2)
sig_psi', file=tmp, append=T)
if(!is.numeric(sig_psi_prior)) cat(' ~',sig_psi_prior, file=tmp, append=T)
if(is.numeric(sig_psi_prior)) {
cat(' <-',sig_psi_prior, file=tmp, append=T)
}
if(!is.numeric(sig_psi_prior)) {
cat('
sig_psi_prior ~',sig_psi_prior, file=tmp, append=T)
}
}
if(isAR1process | isAR1noise) {
cat('
phi', file=tmp, append=T)
if(!is.numeric(phi_prior)) cat(' ~', phi_prior, file=tmp, append=T)
if(is.numeric(phi_prior)) cat(' <-', phi_prior, file=tmp, append=T)
if(!is.numeric(phi_prior)) {
cat('
phi_prior ~',phi_prior, file=tmp, append=T)
}
}
cat('
}
', file=tmp, append=T)
if(!runmodel) {
aschar <- readLines(tmp)
for(i in 1:length(aschar)) cat(aschar[i],"\n")
} else {
# ## bundle data
# if(is.null(x)) x <- 1:length(y)
# dt1 <- c(NA, diff(x))
# SS_data <- list(y=y,
#                 n=length(y),
#                 dt=dt1/mean(dt1,na.rm=T),
#                 dt2=dt1,
#                 tt=x-x[1], pi=pi, x=x)
# SS_data$y[is.nan(SS_data$y)] <- NA
# SS_data$trendprecinit <- 1/var(SS_data$y, na.rm=T)
# SS_data$rateprecinit <- 1/var(diff(SS_data$y)/diff(SS_data$tt), na.rm=T)  ### make this normalized time step!!
#
# SS_data$sigeps_split <- as.numeric(cut(SS_data$x, c(min(SS_data$x),sigeps_breaks,max(SS_data$x)), include.lowest=T))
# SS_data$n_sigeps_split <- max(SS_data$sigeps_split)
#
# if(is.numeric(phi_prior)) SS_data$phi_prior <- phi_prior
# SS_data$p_s <- stochasticPeriods
# SS_data$p_d <- deterministicPeriods
# SS_data$n_ps <- length(stochasticPeriods)
# SS_data$n_pd <- length(deterministicPeriods)
SS_data <- make_SS_data(y=y,
x=x,
stochasticPeriods=stochasticPeriods,
deterministicPeriods=deterministicPeriods,
AR1=AR1,
sig_eps_prior=sig_eps_prior,
sig_xi_prior=sig_xi_prior,
sig_omega_prior=sig_omega_prior,
sig_psi_prior=sig_psi_prior,
phi_prior=phi_prior,
sigeps_breaks=sigeps_breaks,
sigxi_breaks=sigxi_breaks,
normalizedRate=normalizedRate)
## run JAGS
tstart <- Sys.time()
cat("started at ")
print(tstart)
jagsout <- jagsUI::jags(model.file=tmp, data=SS_data,
parameters.to.save=c("trend","rate",
"cycle","cycle_s","cycle_d",
"ar1",
"fit","ypp",
"sig_eps","sig_eps_prior",
"sig_xi", "sig_xi_prior",
"sig_omega", "sig_omega_prior",
"sig_psi", "sig_psi_prior",
"phi", "phi_prior"),
n.chains=ncores, parallel=T, n.iter=niter,
n.burnin=niter/2, n.thin=niter/outlength/2)
now <- Sys.time()
totaltime <- now - tstart
print(totaltime)
cat("finished at ")
print(Sys.time())
cat("\n","Max Rhat:",max(unlist(jagsout$Rhat), na.rm=T))
cat("\n","Min n.eff:",min(unlist(jagsout$n.eff), na.rm=T))
return(jagsout)
}
}
nullmodel <- runSS(y=y, x=x,
runmodel=F,
niter=500*1000, ncores=10,
# sig_xi_prior=c(6.217059e-04, 1.903386e-03, 4.709402e-05),
sig_xi_prior = "dexp(1000)",
sigeps_breaks = thebreaks,
sigxi_breaks = thebreaks)
nullmodel <- runSS(y=y, x=x,
runmodel=T,
niter=500*1000, ncores=10,
# sig_xi_prior=c(6.217059e-04, 1.903386e-03, 4.709402e-05),
sig_xi_prior = "dexp(1000)",
sigeps_breaks = thebreaks,
sigxi_breaks = thebreaks)
# nbyname(nullmodel)
plotRhats(nullmodel)
par(mfrow=c(2,2))
envelope(nullmodel, p="trend", x=x)
# envelope(nullmodel, p="fit", x=x)
envelope(nullmodel, p="rate", x=x)
abline(h=0, lty=2)
envelope(nullmodel, p="ypp", x=x)
# caterpillar(nullmodel, p="sig")
# chaindens_jags(nullmodel, p="sig_xi")
caterpillar(jags_df(nullmodel, p="sig"))
caterpillar(jags_df(nullmodel, p="sig_eps"))
caterpillar(jags_df(nullmodel, p="sig_xi"))
comparedens(as.data.frame(nullmodel$sims.list$sig_eps_prior),
as.data.frame(nullmodel$sims.list$sig_eps))
comparedens(as.data.frame(nullmodel$sims.list$sig_xi_prior),
as.data.frame(nullmodel$sims.list$sig_xi))
par(mfrow=c(1,1))
plot_components(nullmodel, y=y, x=x)
psd_components(nullmodel, y=y, x=x)
envelope(nullmodel, p="ypp", x=x)
points(y=y, x=x)
envelope(nullmodel, p="fit", x=x)
points(y=y, x=x)
envelope(nullmodel, p="rate", x=x)
abline(v=x, col=adjustcolor(1, alpha.f=.1))
abline(h=0)
qq_postpred(nullmodel$sims.list$ypp, y=y)
### add this to jagshelper!!
ts_postpred <- function(ypp, y, x=NULL, add=FALSE, lines=FALSE, ...) { #p=NULL  ?? style it after qq_postpred
ypp_resid <- ypp - matrix(colMeans(ypp), byrow=TRUE, nrow=nrow(ypp), ncol=ncol(ypp))
envelope(ypp_resid, x=x, ylab="Diff from post pred mean", ...=...)
if(is.null(x)) x <- seq_along(y)
points(x=x, y=y-colMeans(ypp))
if(lines) lines(x=x, y=y-colMeans(ypp))
}
ts_postpred(ypp=nullmodel$sims.list$ypp, y=y, x=x)
y <- aa*(hydrometer$sg)#-hydrometer$sg[1])
x <- aa*hydrometer$time_del
thebreaks <- aa*c(0.9, 1.5)
plot(y~x)
abline(v=thebreaks)
nullmodel <- runSS(y=y, x=x,
runmodel=T,
niter=500*1000, ncores=10,
# sig_xi_prior=c(6.217059e-04, 1.903386e-03, 4.709402e-05),
sig_xi_prior = "dexp(1000)",
sigeps_breaks = thebreaks,
sigxi_breaks = thebreaks)
# nbyname(nullmodel)
plotRhats(nullmodel)
traceworstRhat(nullmodel, parmfrow=c(3,3))
par(mfrow=c(2,2))
envelope(nullmodel, p="trend", x=x)
# envelope(nullmodel, p="fit", x=x)
envelope(nullmodel, p="rate", x=x)
abline(h=0, lty=2)
envelope(nullmodel, p="ypp", x=x)
# caterpillar(nullmodel, p="sig")
# chaindens_jags(nullmodel, p="sig_xi")
caterpillar(jags_df(nullmodel, p="sig"))
caterpillar(jags_df(nullmodel, p="sig_eps"))
caterpillar(jags_df(nullmodel, p="sig_xi"))
comparedens(as.data.frame(nullmodel$sims.list$sig_eps_prior),
as.data.frame(nullmodel$sims.list$sig_eps))
comparedens(as.data.frame(nullmodel$sims.list$sig_xi_prior),
as.data.frame(nullmodel$sims.list$sig_xi))
par(mfrow=c(1,1))
plot_components(nullmodel, y=y, x=x)
psd_components(nullmodel, y=y, x=x)
envelope(nullmodel, p="ypp", x=x)
points(y=y, x=x)
envelope(nullmodel, p="fit", x=x)
points(y=y, x=x)
envelope(nullmodel, p="rate", x=x)
abline(v=x, col=adjustcolor(1, alpha.f=.1))
abline(h=0)
qq_postpred(nullmodel$sims.list$ypp, y=y)
### add this to jagshelper!!
ts_postpred <- function(ypp, y, x=NULL, add=FALSE, lines=FALSE, ...) { #p=NULL  ?? style it after qq_postpred
ypp_resid <- ypp - matrix(colMeans(ypp), byrow=TRUE, nrow=nrow(ypp), ncol=ncol(ypp))
envelope(ypp_resid, x=x, ylab="Diff from post pred mean", ...=...)
if(is.null(x)) x <- seq_along(y)
points(x=x, y=y-colMeans(ypp))
if(lines) lines(x=x, y=y-colMeans(ypp))
}
ts_postpred(ypp=nullmodel$sims.list$ypp, y=y, x=x)
