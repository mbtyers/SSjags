axnames[ilist] <- paste0("Cycle[",i,"]")
}
}
if(!is.null(p_s_dim)) {
for(i in 1:(p_s_dim[3])) {
ilist <- ilist+1
ylist[[ilist]] <- jagsout$sims.list$cycle_s[,,i]
cols[ilist] <- 3
axnames[ilist] <- paste0("Cycle[",i,"]")
}
}
}
if(!is.null(ar_dim)) {
ilist <- ilist+1
ylist[[ilist]] <- jagsout$sims.list$ar1
cols[ilist] <- 2
axnames[ilist] <- "AR(1)"
}
if(!is.null(y)) {
totalfit <- ylist[[1]]
for(i in 2:length(ylist)) totalfit <- totalfit+ylist[[i]]
ylist[[ilist+1]] <- matrix(y, byrow=T, nrow=nrow(totalfit), ncol=ncol(totalfit))-totalfit
cols[ilist+1] <- 1
axnames[ilist+1] <- "Irregular"
}
medians <- lapply(ylist, function(x) apply(x,2,median,na.rm=T))
lsps <- lapply(medians, lomb::lsp, times=x, plot=F, ofac=3, type="period", alpha=alpha)
plot(NA, xlim=range(lsps[[1]]$scanned), ylim=c(-length(lsps),0),
log="x", xlab="period",ylab="",yaxt="n",...=...)
for(i in 1:length(lsps)) {
infl <- 0.8/max(lsps[[i]]$power,lsps[[i]]$sig.level)
lines(lsps[[i]]$scanned, infl*lsps[[i]]$power-i, col=cols[i])
abline(h=infl*lsps[[i]]$sig.level-i, lty=3, col=cols[i])
abline(h=-i, lty=1, col=adjustcolor(1,alpha.f=.2))
axis(side=2,at=-i,labels=axnames[i],col.axis=cols[i])
}
# axis(side=2,at=-(1:length(lsps)),labels=axnames,col.axis=cols)
}
psd_components(jagsout=tryit, x=xss, y=y)
psd_components(jagsout=tryit, x=xss, y=y, alpha=0.1)
psd_components(jagsout=tryit, x=xss, y=y, main="title")
psd_components(jagsout=tryit, x=xss)
psd_components(jagsout=tryit, y=y)
psd_components(jagsout=tryit, x=xss, y=y, collapsecycle = T)
library(SSjags)
library(SSjags)
library(usethis)
help("use_data")
help("components")
library(SSjags)
help("plot_components")
SS_out <- trythis
SS_out <- tryit
use_data(SS_out,compress="xz")
### simulating data
simulate <- T
if(simulate) {
xss <- seq(2016,2020, by=1/12)
sig_eps <- 0.4
sig_xi <- 0.5
bcos <- c(1,1)
bsin <- c(1,0.5)
trend <- 0
rate <- 0
y <- rnorm(1, mean=trend+
bcos[1]*cos(xss[1]*2*pi) + bsin[1]*sin(xss[1]*2*pi) +
bcos[2]*cos(xss[1]*4*pi) + bsin[2]*sin(xss[1]*4*pi),
sd=sig_eps)
for(i in 2:length(xss)) {
trend[i] <- trend[i-1] + rate[i-1]
rate[i] <- rnorm(1, mean=rate[i-1], sd=sig_xi) - .3*rate[i-1]
y[i] <- rnorm(1, mean=trend[i]+
bcos[1]*cos(xss[i]*2*pi) + bsin[1]*sin(xss[i]*2*pi) +
bcos[2]*cos(xss[i]*4*pi) + bsin[2]*sin(xss[i]*4*pi),
sd=sig_eps)
}
plot(xss,y,type='l')
}
tryit <- runSS(y, x=xss, runmodel=T,
niter=10000, ncores=3, outlength=500, parallel=TRUE,
stochasticPeriods=c(1,0.5), deterministicPeriods=NULL, AR1=T)  ## THIS WILL BE DATASET TO USE FOR OTHER PKG
library(jagshelper)
plotRhats(tryit)
plotRhats(tryit,n.eff=T)
par(mfrow=c(2,2))
tracedens_jags(tryit,p="sig")
tracedens_jags(tryit,p="phi")
traceworstRhat(tryit,p="trend")
traceworstRhat(tryit,p="rate")
traceworstRhat(tryit,p="ar1")
traceworstRhat(tryit,p="cycle")
traceworstRhat(tryit,p="cycle_d")
fix_traceworstRhat(tryit,p="cycle_s")
fix_traceworstRhat(tryit,p="cycle_s",margin=2)
par(mfrow=c(2,2))
envelope(tryit$sims.list$trend, x=xss, main="trend")
points(xss,y)
envelope(tryit$sims.list$rate, x=xss, main="rate")
abline(h=0,lty=2)
envelope(tryit$sims.list$cycle, x=xss, main="cycle")
envelope(tryit$sims.list$ar1, x=xss, main="ar1")
overlayenvelope(tryit,p="cycle_s")
envelope(tryit, p="trend", x=xss, main="trend")
points(xss,y)
envelope(tryit, p="rate", x=xss, main="rate")
abline(h=0,lty=2)
envelope(tryit, p="cycle", x=xss, main="cycle")
envelope(tryit, p="ar1", x=xss, main="ar1")
envelope(tryit, p="cycle_s", x=xss, main="cycle", column=1)
envelope(tryit, p="cycle_s", x=xss, main="cycle", column=2, col=2, add=T)
envelope(tryit$sims.list$ypp, x=xss)
points(xss,y)
envelope(tryit$sims.list$fit, x=xss)
points(xss,y)
SS_out <- tryit
use_data(SS_out,compress="xz")
SS_data <- data.frame(x=x,y=y)
SS_data <- data.frame(x=xss,y=y)
use_data(SS_data, compress="xz")
plot_components(SS_out)
plot_components(jagsout=SS_out, y=SS_data$y, x=SS_data$x)
plot_components(jagsout=SS_out, y=SS_data$y, x=SS_data$x, collapsecycle=TRUE)
library(SSjags)
library(SSjags)
psd_components(jagsout=SS_out, y=SS_data$y, x=SS_data$x)
psd_components(jagsout=SS_out, y=SS_data$y, x=SS_data$x, collapsecycle=TRUE)
par(mfrow=c(1,1))
psd_components(jagsout=SS_out, y=SS_data$y, x=SS_data$x)
psd_components(jagsout=SS_out, y=SS_data$y, x=SS_data$x, collapsecycle=TRUE)
library(SSjags)
library(SSjags)
library(SSjags)
library(SSjags)
library(SSjags)
library(SSjags)
library(SSjags)
library(SSjags)
library(jagshelper)
xss <- SS_data$x
y <- SS_data$y
tryit <- runSS(y, x=xss, runmodel=T,
niter=10000, ncores=3, outlength=400, parallel=TRUE,
stochasticPeriods=c(1,0.5), deterministicPeriods=NULL, AR1=T)  ## THIS WILL BE DATASET TO USE FOR OTHER PKG
library(SSjags)
tryit <- runSS(y, x=xss, runmodel=T,
niter=10000, ncores=3, outlength=400, parallel=TRUE,
stochasticPeriods=c(1,0.5), deterministicPeriods=NULL, AR1=T)  ## THIS WILL BE DATASET TO USE FOR OTHER PKG
library(jagshelper)
plotRhats(tryit)
plotRhats(tryit,n.eff=T)
par(mfrow=c(2,2))
tracedens_jags(tryit,p="sig")
tracedens_jags(tryit,p="phi")
traceworstRhat(tryit,p="trend")
traceworstRhat(tryit,p="rate")
traceworstRhat(tryit,p="ar1")
traceworstRhat(tryit,p="cycle")
traceworstRhat(tryit,p="cycle_d")
fix_traceworstRhat(tryit,p="cycle_s",margin=2)
par(mfrow=c(2,2))
envelope(tryit$sims.list$trend, x=xss, main="trend")
points(xss,y)
envelope(tryit$sims.list$rate, x=xss, main="rate")
abline(h=0,lty=2)
envelope(tryit$sims.list$cycle, x=xss, main="cycle")
envelope(tryit$sims.list$ar1, x=xss, main="ar1")
overlayenvelope(tryit,p="cycle_s")
envelope(tryit, p="trend", x=xss, main="trend")
points(xss,y)
envelope(tryit, p="rate", x=xss, main="rate")
abline(h=0,lty=2)
envelope(tryit, p="cycle", x=xss, main="cycle")
envelope(tryit, p="ar1", x=xss, main="ar1")
envelope(tryit, p="cycle_s", x=xss, main="cycle", column=1)
envelope(tryit, p="cycle_s", x=xss, main="cycle", column=2, col=2, add=T)
envelope(tryit$sims.list$ypp, x=xss)
points(xss,y)
envelope(tryit$sims.list$fit, x=xss)
points(xss,y)
plot_components(tryit)
par(mfrow=x(1,1))
plot_components(tryit)
par(mfrow=c(1,1))
plot_components(tryit)
plot_components(tryit, x=xss,y=y)
psd_components(tryit, x=xss,y=y)
SS_out <- tryit
usethis::use_data(SS_out, compress="xz")
### asdf smallerize?
skeleton("asdf")
# specify model, which is written to an external file
cat('model {
for(i in 1:n) {
y[i] ~ dnorm(mu[i], tau)
mu[i] <- b0 + b1*x[i] + a[grp[i]]
}
for(j in 1:ngrp) {
a[j] ~ dnorm(0, tau_a)
}
tau <- pow(sig, -2)
sig ~ dunif(0, 10)
b0 ~ dnorm(0, 0.001)
b1 ~ dnorm(0, 0.001)
tau_a <- pow(sig_a, -2)
sig_a ~ dunif(0, 10)
}', file="asdf_jags")
# simulate data to go with the example model
n <- 60
x <- rnorm(n, sd=3)
grp <- sample(1:3, n, replace=T)
y <- rnorm(n, mean=grp-x)
# bundle data to pass into JAGS
asdf_data <- list(x=x,
y=y,
n=length(x),
grp=as.numeric(as.factor(grp)),
ngrp=length(unique(grp)))
# JAGS controls
niter <- 10000
ncores <- 3
{
tstart <- Sys.time()
print(tstart)
asdf_jags_out <- jagsUI::jags(model.file="asdf_jags", data=asdf_data,
parameters.to.save=c("b0","b1","sig","a","sig_a"),
n.chains=ncores, parallel=T, n.iter=niter,
n.burnin=niter/2, n.thin=niter/1000)
print(Sys.time() - tstart)
}
par(mfrow=c(2,2))
tracedens_jags(asdf_jags_out)
check_Rhat(asdf_jags_out)
plotRhats(asdf_jags_out)
check_neff(asdf_jags_out)
plotRhats(asdf_jags_out,n.eff=T)
pairstrace_jags(asdf_jags_out,points=T)
help(comparedens())
help(comparedens
)
comparedens(x1=asdf_jags_out, x2=asdf_jags_out, p=c("a","b","sig"))
# JAGS controls
niter <- 100000
ncores <- 3
{
tstart <- Sys.time()
print(tstart)
asdf_jags_out <- jagsUI::jags(model.file="asdf_jags", data=asdf_data,
parameters.to.save=c("b0","b1","sig","a","sig_a"),
n.chains=ncores, parallel=T, n.iter=niter,
n.burnin=niter/2, n.thin=niter/1000)
print(Sys.time() - tstart)
}
par(mfrow=c(2,2))
tracedens_jags(asdf_jags_out)
# JAGS controls
niter <- 1000000
ncores <- 3
{
tstart <- Sys.time()
print(tstart)
asdf_jags_out <- jagsUI::jags(model.file="asdf_jags", data=asdf_data,
parameters.to.save=c("b0","b1","sig","a","sig_a"),
n.chains=ncores, parallel=T, n.iter=niter,
n.burnin=niter/2, n.thin=niter/1000)
print(Sys.time() - tstart)
}
par(mfrow=c(2,2))
tracedens_jags(asdf_jags_out)
check_Rhat(asdf_jags_out)
plotRhats(asdf_jags_out)
check_neff(asdf_jags_out)
plotRhats(asdf_jags_out,n.eff=T)
pairstrace_jags(asdf_jags_out,points=T)
comparedens(x1=asdf_jags_out, x2=asdf_jags_out, p=c("a","b","sig"))
usethis::use_data("asdf_jags_out",compress="xz")
usethis::use_data(asdf_jags_out,compress="xz")
nparam(asdf_jags_out)
nparam(jagshelper::asdf_jags_out)
nbyname(jagshelper::asdf_jags_out)
nbyname(asdf_jags_out)
dim(jags_df(asdf_jags_out))
dim(jags_df(jagshelper::asdf_jags_out))
### simulating data
simulate <- T
if(simulate) {
xss <- seq(2016,2020, by=1/10)
sig_eps <- 0.4
sig_xi <- 0.5
bcos <- c(1,1)
bsin <- c(1,0.5)
trend <- 0
rate <- 0
y <- rnorm(1, mean=trend+
bcos[1]*cos(xss[1]*2*pi) + bsin[1]*sin(xss[1]*2*pi) +
bcos[2]*cos(xss[1]*4*pi) + bsin[2]*sin(xss[1]*4*pi),
sd=sig_eps)
for(i in 2:length(xss)) {
trend[i] <- trend[i-1] + rate[i-1]
rate[i] <- rnorm(1, mean=rate[i-1], sd=sig_xi) - .3*rate[i-1]
y[i] <- rnorm(1, mean=trend[i]+
bcos[1]*cos(xss[i]*2*pi) + bsin[1]*sin(xss[i]*2*pi) +
bcos[2]*cos(xss[i]*4*pi) + bsin[2]*sin(xss[i]*4*pi),
sd=sig_eps)
}
plot(xss,y,type='l')
}
library(jagshelper)
library(SSjags)
# xss <- SS_data$x
# y <- SS_data$y
tryit <- runSS(y, x=xss, runmodel=T,
niter=10000, ncores=3, outlength=400, parallel=TRUE,
stochasticPeriods=c(1,0.5), deterministicPeriods=NULL, AR1=T)  ## THIS WILL BE DATASET TO USE FOR OTHER PKG
library(jagshelper)
plotRhats(tryit)
plotRhats(tryit,n.eff=T)
### simulating data
simulate <- T
if(simulate) {
xss <- seq(2016,2020, by=1/10)
sig_eps <- 0.4
sig_xi <- 0.5
bcos <- c(1,1)
bsin <- c(1,0.5)
trend <- 0
rate <- 0
y <- rnorm(1, mean=trend+
bcos[1]*cos(xss[1]*2*pi) + bsin[1]*sin(xss[1]*2*pi) +
bcos[2]*cos(xss[1]*4*pi) + bsin[2]*sin(xss[1]*4*pi),
sd=sig_eps)
for(i in 2:length(xss)) {
trend[i] <- trend[i-1] + rate[i-1]
rate[i] <- rnorm(1, mean=rate[i-1], sd=sig_xi) - .3*rate[i-1]
y[i] <- rnorm(1, mean=trend[i]+
bcos[1]*cos(xss[i]*2*pi) + bsin[1]*sin(xss[i]*2*pi) +
bcos[2]*cos(xss[i]*4*pi) + bsin[2]*sin(xss[i]*4*pi),
sd=sig_eps)
}
plot(xss,y,type='l')
}
runSS(y, x=xss, runmodel=F,
niter=10000, ncores=NULL, parallel=TRUE,
stochasticPeriods=c(1,0.5), deterministicPeriods=NULL, AR1=T)  ## 100k in 2 min
library(jagshelper)
library(SSjags)
# xss <- SS_data$x
# y <- SS_data$y
tryit <- runSS(y, x=xss, runmodel=T,
niter=10000, ncores=3, outlength=400, parallel=TRUE,
stochasticPeriods=c(1,0.5), deterministicPeriods=NULL, AR1=T)  ## THIS WILL BE DATASET TO USE FOR OTHER PKG
library(jagshelper)
plotRhats(tryit)
plotRhats(tryit,n.eff=T)
par(mfrow=c(2,2))
tracedens_jags(tryit,p="sig")
tracedens_jags(tryit,p="phi")
traceworstRhat(tryit,p="trend")
traceworstRhat(tryit,p="rate")
traceworstRhat(tryit,p="ar1")
traceworstRhat(tryit,p="cycle")
traceworstRhat(tryit,p="cycle_d")
fix_traceworstRhat(tryit,p="cycle_s",margin=2)
par(mfrow=c(2,2))
envelope(tryit$sims.list$trend, x=xss, main="trend")
points(xss,y)
envelope(tryit$sims.list$rate, x=xss, main="rate")
abline(h=0,lty=2)
envelope(tryit$sims.list$cycle, x=xss, main="cycle")
envelope(tryit$sims.list$ar1, x=xss, main="ar1")
overlayenvelope(tryit,p="cycle_s")
envelope(tryit, p="trend", x=xss, main="trend")
points(xss,y)
envelope(tryit, p="rate", x=xss, main="rate")
abline(h=0,lty=2)
envelope(tryit, p="cycle", x=xss, main="cycle")
envelope(tryit, p="ar1", x=xss, main="ar1")
envelope(tryit, p="cycle_s", x=xss, main="cycle", column=1)
envelope(tryit, p="cycle_s", x=xss, main="cycle", column=2, col=2, add=T)
par(mfrow=c(1,1))
plot_components(tryit, x=xss,y=y)
psd_components(tryit, x=xss,y=y)
SS_out <- tryit
usethis::use_data(SS_out, compress="xz")
SS_data <- data.frame(x=xss,y=y)
usethis::use_data(SS_out, compress="xz")
usethis::use_data(SS_data, compress="xz")
# specify model, which is written to an external file
cat('model {
for(i in 1:n) {
y[i] ~ dnorm(mu[i], tau)
mu[i] <- b0 + b1*x[i] + a[grp[i]]
}
for(j in 1:ngrp) {
a[j] ~ dnorm(0, tau_a)
}
tau <- pow(sig, -2)
sig ~ dunif(0, 10)
b0 ~ dnorm(0, 0.001)
b1 ~ dnorm(0, 0.001)
tau_a <- pow(sig_a, -2)
sig_a ~ dunif(0, 10)
}', file="asdf_jags")
# simulate data to go with the example model
n <- 60
x <- rnorm(n, sd=3)
grp <- sample(1:3, n, replace=T)
y <- rnorm(n, mean=grp-x)
# bundle data to pass into JAGS
asdf_data <- list(x=x,
y=y,
n=length(x),
grp=as.numeric(as.factor(grp)),
ngrp=length(unique(grp)))
# JAGS controls
niter <- 1000000
ncores <- 3
{
tstart <- Sys.time()
print(tstart)
asdf_jags_out <- jagsUI::jags(model.file="asdf_jags", data=asdf_data,
parameters.to.save=c("b0","b1","sig","a","sig_a"),
n.chains=ncores, parallel=T, n.iter=niter,
n.burnin=niter/2, n.thin=niter/1000)
print(Sys.time() - tstart)
}
par(mfrow=c(2,2))
tracedens_jags(asdf_jags_out)
# specify model, which is written to an external file
cat('model {
for(i in 1:n) {
y[i] ~ dnorm(mu[i], tau)
mu[i] <- b0 + b1*x[i] + a[grp[i]]
}
for(j in 1:ngrp) {
a[j] ~ dnorm(0, tau_a)
}
tau <- pow(sig, -2)
sig ~ dunif(0, 10)
b0 ~ dnorm(0, 0.001)
b1 ~ dnorm(0, 0.001)
tau_a <- pow(sig_a, -2)
sig_a ~ dunif(0, 10)
}', file="asdf_jags")
# simulate data to go with the example model
n <- 60
x <- rnorm(n, sd=3)
grp <- sample(1:3, n, replace=T)
y <- rnorm(n, mean=grp-x)
# bundle data to pass into JAGS
asdf_data <- list(x=x,
y=y,
n=length(x),
grp=as.numeric(as.factor(grp)),
ngrp=length(unique(grp)))
# JAGS controls
niter <- 1000000
ncores <- 3
{
tstart <- Sys.time()
print(tstart)
asdf_jags_out <- jagsUI::jags(model.file="asdf_jags", data=asdf_data,
parameters.to.save=c("b0","b1","sig","a","sig_a"),
n.chains=ncores, parallel=T, n.iter=niter,
n.burnin=niter/2, n.thin=niter/1000)
print(Sys.time() - tstart)
}
par(mfrow=c(2,2))
tracedens_jags(asdf_jags_out)
help("try")
library(parallel)
help(detectCores)
library(SSjags)
help(SSjags)
help(runSS)
library(SSjags)
help(runSS)
library(SSjags)
help(runSS)
library(SSjags)
help(runSS)
library(SSjags)
help(runSS)
library(SSjags)
help(runSS)
library(SSjags)
library(SSjags)
help(runSS)
library(SSjags)
help(runSS)
library(SSjags)
help(runSS)
runSS(runmodel=F,ar1=T)
runSS(runmodel=F,AR1=T)
library(SSjags)
help(runSS)
library(usethis)
help("usethis")
usethis::gh_token_help()
gitcreds::gitcreds_set()
library(usethis)
use_git_ignore()
use_git_ignore(".DS_Store")
help(runSS)
library(SSjags)
help(runSS)
use_readme_md()
nbyname(SS_out)
library(SSjags)
help(runSS)
library(SSjags)
help(runSS)
library(SSjags)
